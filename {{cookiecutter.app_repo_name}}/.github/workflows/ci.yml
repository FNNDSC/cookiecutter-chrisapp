# Automatically build multi-architectural tagged container images and push them to DockerHub
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds
#
# - targeted platforms: x86_64, PowerPC64, ARM64
# - master is built as fnndsc/pl-markimg:latest
# - tagged commits are built as fnndsc/pl-markimg:<tag>
# - tagged commits are also uploaded to chrisstore.co
#
# In order to use this workflow, see
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds#steps-to-enable

name: ci

on:
  push:
    # we have to guess what the name of the default branch is
    branches: [ master, main, trunk ]
    tags: [ '**' ]
  pull_request:
    branches: [ master, main, trunk ]

jobs:
  test: {% if cookiecutter.test_automatically == 'no' %}
    if: false
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: docker build -t "${GITHUB_REPOSITORY,,}" .
      - name: nose tests
        run: docker run "${GITHUB_REPOSITORY,,}" nosetests

  publish: {% if cookiecutter.publish_automatically == 'yes' %}
    if: github.event_name == 'push' || github.event_name == 'release'
    runs-on: ubuntu-24.04
{%raw %}
    # we want to both push the build to DockerHub, but also
    # keep a local copy so that we can run
    #
    #     docker run fnndsc/pl-app app --json > App.json
    #
    # buildx currently does not support multiple output locations,
    # neither can multi-architectural builds be loaded into docker.
    # Here we use a local registry to cache the build.
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Get git tag
        id: git_info
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "::set-output name=tag::${GITHUB_REF##*/}"
      - name: Decide image tag name
        id: determine
        env:
          git_tag: ${{ steps.git_info.outputs.tag }}
        run: |
          repo="${GITHUB_REPOSITORY,,}"  # to lower case
          # if build triggered by tag, use tag name
          tag="${git_tag:-latest}"
          dock_image=$repo:$tag
          echo $dock_image
          echo "::set-output name=dock_image::$dock_image"
          echo "::set-output name=repo::$repo"

      - uses: actions/checkout@v2

      # QEMU is for emulating non-x86_64 platforms
      - uses: docker/setup-qemu-action@v1
      # buildx is the next-generation docker image builder
      - uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      # save some time during rebuilds
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        id: dockerhub_login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          tags: |
            ${{ steps.determine.outputs.dock_image }}
            localhost:5000/${{ steps.determine.outputs.dock_image }}
            ghcr.io/${{ steps.determine.outputs.dock_image }}
          platforms: {% endraw %}{{ cookiecutter.platforms }}{% raw %}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Get plugin meta
        id: pluginmeta
        run: |
          repo=${{ steps.determine.outputs.repo }}
          dock_image=${{ steps.determine.outputs.dock_image }}
          plname="$(sed 's/^.*\///' <<< $GITHUB_REPOSITORY)" && echo "name=$plname"
          docker pull localhost:5000/$dock_image
          docker tag localhost:5000/$dock_image $dock_image
          script=$(docker inspect --format '{{ (index .Config.Cmd 0) }}' $dock_image)
          docker run --rm $dock_image $script --json \
            | jq '. += {"name":"'$plname'", "dock_image": "'$dock_image'", "public_repo": "'${{ github.server_url }}/${{ github.repository }}'" }' \
            > /tmp/description.json
          json="$(docker run --rm $dock_image $script --json)"
          # Escape single quotes
          json_escaped=$(echo "$json" | sed "s/'/\\'/g")

          jq <<< "$json"  # pretty print in log
          echo "json=$json_escaped" >> $GITHUB_OUTPUT
          echo "title=$(jq -r '.title' <<< "$json")" >> $GITHUB_OUTPUT

      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v2
        continue-on-error: true  # it is not crucial that this works
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ steps.pluginmeta.outputs.title }}
          readme-filepath: ./README.rst
          repository: ${{ steps.determine.outputs.repo }}

      - name: Upload ChRIS Plugin
        id: upload
        if: github.ref_type == 'tag'
        uses: FNNDSC/upload-chris-plugin@main
        with:
          description_file: /tmp/description.json
          username: ${{ secrets.CHRISPROJECT_USERNAME }}
          password: ${{ secrets.CHRISPROJECT_PASSWORD }}
          chris_url: https://cube.chrisproject.org/api/v1/
          compute_names: NERC
{% endraw %}